@startuml

start

:Read Configuration;
note right
readConfig function
Reads port and log level
from config file
end note

:Start WebSocket Server;
note right
websockets.serve(handle_message, "localhost", port)
end note

:Wait for Client Connection;

repeat
  :Receive Message from Client;
  :Parse Message;
  switch (Message Control Type)
    case ('ctrl')
      switch (Message Data)
        case ('stop')
          (A)
          detach
          (A)
          :Cancel Task;
          :Stop Event Loop;
          stop
      endswitch
    case ('data')
      :Start Audio Processing Task;
      note right
      asyncio task
      sends Status Messages
          each processing step
      end note
      :send data to client;
      :inform client of done;
      :wait for stopcode;
    case ('msg')
      switch (Message Data)
        case ('start')
          :Send "started" Message to Client;
        case ('Data Received')
          :Send "done" Control to Client;
      endswitch
  endswitch


:condition alive;
note right
websocket.open()
&& send timeout < 60s
&& task not done
end note
repeat while (alive) is (true)
(A)




@enduml
